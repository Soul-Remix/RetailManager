@page "/products/search/{searchQuery}"
@inject IProductsEndpoint ProductEndpoints
@inject NavigationManager NavManager
<PageTitle>Search</PageTitle>

<ErrorAlert ShowAlert="@_showError" ErrorMessage="@_errorMessage"/>

<LoadingSpinner IsLoading="@_isLoading"/>

@if (!_isLoading && ProductsList != null && ProductsList.Count == 0)
{
    <div class="alert">
        <p class="m-0">no search results found.</p>
    </div>
}

@if (!_isLoading && ProductsList != null && ProductsList.Count > 0)
{
    <div class="container-fluid">
        <h3>Search Products</h3>
        <div class="row">
            @foreach (var product in ProductsList)
            {
                <ProductCard product="@product"/>
            }
        </div>
    </div>
}


@code {
    private bool _isLoading;
    private bool _showError;
    private string _errorMessage;
    private List<ProductModel> ProductsList;

    [Parameter]
    public string SearchQuery { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _showError = false;

        try
        {
            ProductsList = await ProductEndpoints.GetAll(SearchQuery);
            _isLoading = false;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _isLoading = false;
            _showError = true;
        }
    }

    private void ExecuteSearch()
    {
        NavManager.NavigateTo($"products/search/{SearchQuery}");
    }

}
