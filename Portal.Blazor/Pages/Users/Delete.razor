@inject IUserEndpoints UsersEndpoints
@inject NavigationManager NavManager
@page "/users/delete/{id}"
<PageTitle>Delete user</PageTitle>


<ErrorAlert ShowAlert="@_showError" ErrorMessage="@_errorMessage"/>

<LoadingSpinner IsLoading="@_isLoading"/>

@if (!_isLoading && _user != null)
{
    <div class="container-fluid">
        <h3>Are you sure you want to delete this?</h3>
        <h4>User</h4>
        <hr/>
        <dl class="row">
            <dt class="col-sm-2">First Name</dt>
            <dd class="col-sm-10">@_user.FirstName</dd>
            <dt class="col-sm-2">Last Name</dt>
            <dd class="col-sm-10">@_user.LastName</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@_user.Email</dd>
            <dt class="col-sm-2">Roles</dt>
            <dd class="col-sm-10">@_user.Roles</dd>
            <dt class="col-sm-2">Date Joined</dt>
            <dd class="col-sm-10">@_user.CreatedAt</dd>
        </dl>
    </div>
    <div>
        <button class="btn btn-primary" role="navigation" @onclick="OnClickGoBack">Go Back</button>
        <button class="btn btn-danger mx-3" disabled="@_isDeleteLoading" @onclick="OnClickDelete">
            @if (_isDeleteLoading)
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else
            {
                <p class="m-0">Delete</p>
            }
        </button>
    </div>
}


@code {

    [Parameter]
    public string Id { get; set; }

    private bool _isDeleteLoading;
    private bool _isLoading;
    private bool _showError;
    private string _errorMessage = "";
    private UserModel? _user;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _showError = false;

        try
        {
            _user = await UsersEndpoints.GetDetail(Id);
            _isLoading = false;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _isLoading = false;
            _showError = true;
        }
    }

    private void OnClickGoBack()
    {
        NavManager.NavigateTo($"users");
    }

    private async Task OnClickDelete()
    {
        _isDeleteLoading = true;
        try
        {
            await UsersEndpoints.Delete(Id);
            OnClickGoBack();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _isDeleteLoading = false;
            _showError = true;
        }
    }

}