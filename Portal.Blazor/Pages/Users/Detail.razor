@inject IUserEndpoints UsersEndpoints
@inject NavigationManager NavManager
@page "/Products/Detail/{id}"
@if (_user != null)
{
    <PageTitle>@_user.FirstName</PageTitle>
}
else
{
    <PageTitle>User</PageTitle>
}

<ErrorAlert ShowAlert="@_showError" ErrorMessage="@_errorMessage"/>

<LoadingSpinner IsLoading="@_isLoading"/>

@if (!_isLoading && _user != null)
{
    <div class="container-fluid">
        <div class="row">
            <h3>User</h3>
            <hr/>
            <dl class="row">
            <dt class="col-sm-2">
               First Name
            </dt>
            <dd class="col-sm-10">
            @_user.FirstName
            </dd>
            <dt class="col-sm-2">
               Last Name
            </dt>
            <dd class="col-sm-10">
                @_user.LastName
            </dd>
            <dt class="col-sm-2">
                Email
            </dt>
            <dd class="col-sm-10">
                @_user.Email
            </dd>
            <dt class="col-sm-2">
                Date Joined
            </dt>
            <dd class="col-sm-10">
                @_user.CreatedAt
            </dd>
            <dt class="col-sm-2">
                Roles
            </dt>
            <dd class="col-sm-10">
                @_user.Roles
            </dd>
         </dl>
            <div>
                <button class="btn btn-primary" role="navigation" @onclick="OnClickEdit">Edit</button>
                <button class="btn btn-danger mx-3" role="navigation" @onclick="OnClickDelete">Delete</button>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }

    private bool _isLoading;
    private bool _showError;
    private string _errorMessage = "";
    private UserModel? _user;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _showError = false;

        try
        {
            _user = await UsersEndpoints.GetDetail(Id);
            _isLoading = false;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _isLoading = false;
            _showError = true;
        }
    }

    private void OnClickEdit()
    {
        NavManager.NavigateTo($"users/edit/{_user.Id}");
    }

    private void OnClickDelete()
    {
        NavManager.NavigateTo($"users/delete/{_user.Id}");
    }

}