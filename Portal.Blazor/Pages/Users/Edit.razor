@inject IUserEndpoints UserEndpoints
@inject NavigationManager NavManager
@page "/users/edit/{id}"
<PageTitle>Edit user account</PageTitle>


<h3>Edit user</h3>

<ErrorAlert ShowAlert="@_showError" ErrorMessage="@_errorMessage"/>

<LoadingSpinner IsLoading="@_isLoadingPage"/>

@if (!_isLoadingPage && _user != null)
{
    <EditForm Model="_user" OnValidSubmit="ExecuteUpdate" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator/>

    <div class="form-group row mb-4">
        <label for="email" class="col-md-2 col-form-label">Email:</label>
        <div class="col-md-10">
            <input id="email" class="form-control" @bind="_user.Email"/>
            <ValidationMessage For="() => _user.Email"/>
        </div>
    </div>
    <div class="form-group row mb-4">
        <label for="firstName" class="col-md-2 col-form-label">First Name:</label>
        <div class="col-md-10">
            <input id="firstName" class="form-control" @bind="_user.FirstName"/>
            <ValidationMessage For="() => _user.FirstName"/>
        </div>
    </div>
    <div class="form-group row mb-4">
        <label for="lastName" class="col-md-2 col-form-label">Last Name:</label>
        <div class="col-md-10">
            <input id="lastName" class="form-control" @bind="_user.LastName"/>
            <ValidationMessage For="() => _user.LastName"/>
        </div>
    </div>
    <div class="d-flex justify-content-center">
        @if (_isLoading)
        {
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            <button class="btn btn-success">Register</button>
        }
    </div>
</EditForm>
}


@code {
    [Parameter]
    public string Id {get;set;}

    private UserModel _user;
    private bool _isLoadingPage;
    private bool _isLoading;
    private bool _showError;
    private string _errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        _isLoadingPage = true;
        _showError = false;

        try
        {
            _user = await UserEndpoints.GetDetail(Id);
            _isLoadingPage = false;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _isLoadingPage = false;
            _showError = true;
        }
    }

    private async Task ExecuteUpdate()
    {
        _isLoading = true;
        _showError = false;

        try
        {
            await UserEndpoints.Update(_user);
            _isLoading = false;
            NavManager.NavigateTo($"/users/detail/{_user.Id}");
        }
        catch (Exception ex)
        {
           _errorMessage = ex.Message;
            _isLoading = false;
            _showError = true;
        }
    }

}